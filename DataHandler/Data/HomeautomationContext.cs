// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DataHandler.Models;

namespace DataHandler.Data
{
    public partial class HomeautomationContext : DbContext
    {
        public HomeautomationContext()
        {
        }

        public HomeautomationContext(DbContextOptions<HomeautomationContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ConnectionCapability> ConnectionCapability { get; set; }
        public virtual DbSet<ConnectionType> ConnectionType { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DeviceType> DeviceType { get; set; }
        public virtual DbSet<ProductFamily> ProductFamily { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceType> ServiceType { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ConnectionCapability>(entity =>
            {
                entity.HasOne(d => d.ConnectionType)
                    .WithMany(p => p.ConnectionCapability)
                    .HasForeignKey(d => d.ConnectionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConnectionCapability_ConnectionType");

                entity.HasOne(d => d.Device)
                    .WithMany(p => p.ConnectionCapability)
                    .HasForeignKey(d => d.DeviceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConnectionCapability_Device");
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.HasOne(d => d.DeviceType)
                    .WithMany(p => p.Device)
                    .HasForeignKey(d => d.DeviceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Device_DeviceType");

                entity.HasOne(d => d.ProductFamily)
                    .WithMany(p => p.Device)
                    .HasForeignKey(d => d.ProductFamilyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Device_ProductFamily");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasOne(d => d.Device)
                    .WithMany(p => p.Service)
                    .HasForeignKey(d => d.DeviceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Device");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.Service)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_ServiceType");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}